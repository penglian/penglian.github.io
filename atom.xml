<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Penglian的博客</title>
  <icon>https://www.gravatar.com/avatar/e535e1a14e9c89335ced6c415a4d9735</icon>
  <subtitle>我不仅仅是一个码农</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//litten.me/"/>
  <updated>2018-06-13T06:23:17.653Z</updated>
  <id>//litten.me/</id>
  
  <author>
    <name>Purry</name>
    <email>1034670136@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android的IPC机制</title>
    <link href="//litten.me/2018/06/13/blog_ipc_GitHub/"/>
    <id>//litten.me/2018/06/13/blog_ipc_GitHub/</id>
    <published>2018-06-13T04:00:00.000Z</published>
    <updated>2018-06-13T06:23:17.653Z</updated>
    
    <content type="html"><![CDATA[<hr><p>简要介绍Android IPC和多进程的运行模式以及常见的几种IPC方式。<br><a id="more"></a></p><h2 id="IPC简介"><a href="#IPC简介" class="headerlink" title="IPC简介"></a>IPC简介</h2><h3 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h3><p>IPC是Inter-Process Communication的缩写，含义为进程间通信或者跨进程通信，是指两个进程间进行数据交换的过程。</p><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><p>进程一般指一个执行单元，在PC或者移动设备上指一个程序或者一个应用；线程是CPU调度的最小单元，同时线程也是一种有限的系统资源。一个进程可以包含多个线程，两者是包含的关系。例如在Android应用中，默认都含有一个主线程，也叫做UI线程，用于操作一些界面绘制的任务，如果把一些耗时任务放在UI线程中，就会引起ANR(应用没有响应)，所以必须将其放入到子线程中进行。</p><h3 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h3><p>对于Android开发者来说，Binder应该是既熟悉又陌生，熟悉是因为在Android系统中它无处不在，陌生是因为它学习门槛高，从应用开发层贯穿至linux内核层，要深入了解你必须苦下功夫，阅读源码。所以binder很复杂，这边简要介绍binder使用以及上层原理。</p><p>Binder是Android的一个实现了Ibinder接口的类，它是一种跨进程的通信方式。在Linux内核层，它是一种虚拟的物理设备，它含有自己设备驱动在Linux内核层负责与硬件进行交互；在应用层与FrameWork层，Binder充当的是客户端与服务端进行消息交换的媒介，相当于一个中间层，对消息进行包装（封装成Binder对象），客户端就可以通过该对象来获取服务端的内容（客户端与服务端是可以随时互换的，并不是固定不变的）。</p><h2 id="Android中的多进程模式"><a href="#Android中的多进程模式" class="headerlink" title="Android中的多进程模式"></a>Android中的多进程模式</h2><h3 id="多进程设置"><a href="#多进程设置" class="headerlink" title="多进程设置"></a>多进程设置</h3><p>多进程的配置很简单，只要在Manifests配置文件中，给四大组件配上android:process属性即可，配置完运行即可在AndroidStudio或者Adb命令查看到多个进程以及相应的ID。</p><h3 id="多进程运行机制"><a href="#多进程运行机制" class="headerlink" title="多进程运行机制"></a>多进程运行机制</h3><p>Android会为每个进程分配一个虚拟机，不同的虚拟机在内存分配上有不同的地址空间，这就导致不同的虚拟机访问同一个类会产生多个副本。例如：进程A与进程B，类C含有一个静态属性，在进程A中将其值改变，而在进程B中读取的还是之前未改变的值，这就产生了一个同步的差异。</p><p>多进程一般会产生一下几个问题：</p><p>1、静态成员与单例完全失效</p><p>2、线程同步机制完全失效</p><p>3、SharePreference可靠性下降</p><p>4、Apllication会创建多次</p><p>第1与第2个问题都是因为内存地址不同造成的；第3个问题是由于多进程并发读写Xml文件，可能造成数据丢失或者错乱；第四个问题是Android系统机制决定的，每个进程都会分配一个独立的虚拟机，这个过程其实就是启动一个应用的过程</p><h2 id="Android中的IPC方式"><a href="#Android中的IPC方式" class="headerlink" title="Android中的IPC方式"></a>Android中的IPC方式</h2><p>由上可知，在多进程中不能像单进程一样操作，否则会造成很多潜在的问题，必须用进程间通信来处理跨域问题，以下是常见几种IPC方式</p><h3 id="使用Bundle"><a href="#使用Bundle" class="headerlink" title="使用Bundle"></a>使用Bundle</h3><p>通过Intent传递Bundle数据可用于实现组件（Activity、Service以及Receiver）之间消息通信，Bundle实现了Parceable接口，方便在不同进程间通信。Bundle支持的类型有基本类型、Parceable以及Serializable以及Android支持的特殊对象。例如：进程A的<br>aActivity直接用Intent(消息封装成Bundle对象)传递给进程B的bActivity,bActivity就能获取bundle中消息，实现进程间的通信了。</p><h3 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h3><p>文件共享顾名思义就是利用文件来存储数据，然后通过对文件的读写来实现数据共享。由上可知，多进程时可能会造成高并发操作文件，导致数据错乱或者不可靠，所以文件共享适合对数据同步要求不高的进程之间通信，并且要妥善处理并发读写问题。</p><h3 id="AIDL"><a href="#AIDL" class="headerlink" title="AIDL"></a>AIDL</h3><p>AIDL是应用接口定义语言，是用于实现进程间通信的，主要分为客户端与服务端。</p><p>服务端：</p><p>服务端首先要创建一个Service用来监听客户端的请求，然后创建一个AIDL文件，将暴露给客户端的接口在AIDL文件中声明，最后在Service中实现这个AIDL接口即可。</p><p>客户端：</p><p>客户端要做的事稍微简单点，首先需要绑定服务端的Service,绑定成功后，将服务端返回的Binder对象转换成AIDL接口所属的类型，接着就可以调用AIDL中的方法了。</p><p>对于AIDL文件的创建以及具体的代码事例这里就不进行介绍了，想了解的同学可以上网查找。</p><h3 id="Messeneger"><a href="#Messeneger" class="headerlink" title="Messeneger"></a>Messeneger</h3><p>Messenger可以翻译为信使，通过它可以在不同进程间传递Message对象，将数据封装成Message，就可以轻松实现进程间传递了。Messenger是一种轻量级的IPC方案，它的底层实现是aidl,它是串行执行请求的，不能并发处理多个客户端的请求，所以它只适用于一些非高并发请求的场景。如下是它的实现流程图：</p><p><img src="/img/pl/ipc_messenger.png" alt=""></p><h3 id="使用ContentProvider"><a href="#使用ContentProvider" class="headerlink" title="使用ContentProvider"></a>使用ContentProvider</h3><p>ContentProvider是内容提供者，对于Android开发者来说这个应该不陌生，它是四大组件之一，它的搭档是ContentResolver(内容解析者)。底层是基于binder实现的，Android系统帮我们做好了封装，我们可以很简单的就能实现IPC。实现一个ContentProvider需要继承ContentProvider类，并且重写CRUD四个方法，并对其进行注册设置标识，其它应用或者进程通过ContentResolver与标识对其进行解析，这就实现了进程间的通信了。当然ContentProvider存储的媒介是多样的，可以是数据库、文件或者其它。</p><h3 id="使用Socket"><a href="#使用Socket" class="headerlink" title="使用Socket"></a>使用Socket</h3><p>Socket也成为“套接字”，是网络通信中的概念，分为流式套接字以及用户数据报套接字两种，分别对应Tcp(可靠传输)与Udp(不可靠传输)协议。socket是基于客户端/服务器模式的，服务端启动一个服务监听客户端的连接，当有客户端接进来时，就可以进行消息传递了。客户端就是配置好ip以及端口号，发送连接请求给服务端即可。当然对于服务端的设计还是有点讲究的，需要考虑到多客户端接入处理效率以及资源的回收等问题，这里就不多做描述了，有兴趣的同学可以自己尝试。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面介绍的IPC方式多种多样，对于开发者来说选择合适的IPC方式是相当重要的，如下图：</p><p><img src="/img/pl/ipc_difference.png" alt=""></p><p>当然Android的IPC岂是一篇博客能够讲完的，这里只是对其作了大致的介绍，对于binder、aidl以及Messenger等都没有做深入研究，有兴趣的同学可以阅读对应的源码进行研究探索。</p><p>参考书籍：《Android开发艺术探索》</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;简要介绍Android IPC和多进程的运行模式以及常见的几种IPC方式。&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="//litten.me/tags/android/"/>
    
      <category term="IPC" scheme="//litten.me/tags/IPC/"/>
    
      <category term="Binder" scheme="//litten.me/tags/Binder/"/>
    
      <category term="AIDL" scheme="//litten.me/tags/AIDL/"/>
    
      <category term="Messenger" scheme="//litten.me/tags/Messenger/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Serializable与Parcelable</title>
    <link href="//litten.me/2018/06/06/blog_serialization_GitHub/"/>
    <id>//litten.me/2018/06/06/blog_serialization_GitHub/</id>
    <published>2018-06-06T04:00:00.000Z</published>
    <updated>2018-06-08T15:06:35.850Z</updated>
    
    <content type="html"><![CDATA[<hr><p>简要介绍序列化以及反序列化，以及两种实现方式Serializable和Parcelable还有二者的区别<br><a id="more"></a></p><h2 id="序列化与反序列化的由来"><a href="#序列化与反序列化的由来" class="headerlink" title="序列化与反序列化的由来"></a>序列化与反序列化的由来</h2><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>序列化 (Serialization)将对象的状态信息转换为可以存储或传输的形式的过程。在序列化期间，对象将其当前状态写入到临时或持久性存储区。即对象转换为字节序列。</p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>顾名思义，就是从存储区上反序列化对象的状态，重新<em>创建</em>对象。即字节序列重新转换为对象。</p><h3 id="两者的由来"><a href="#两者的由来" class="headerlink" title="两者的由来"></a>两者的由来</h3><p>在日常java编程中，网络传输以及文件存储等操作是必不可少的。序列化能保证网络传输以及文件存储中对象的一致性与持久性，不会发生错乱；反序列化能重新创建一个相同的对象，所以说序列化与反序列化也是java编程中必不可少的。</p><h2 id="如何实现序列化"><a href="#如何实现序列化" class="headerlink" title="如何实现序列化"></a>如何实现序列化</h2><h3 id="Serializable接口"><a href="#Serializable接口" class="headerlink" title="Serializable接口"></a>Serializable接口</h3><p><em>Serializable</em>是java提供的一个序列化的接口，它是一个空接口，为对象提供标准的序列化与反序列化操作。实体定义如下<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyPig</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Serializable</span></span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final long serialVersionUID = <span class="number">1</span>L;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> AGE = <span class="string">"269"</span>;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> color;  </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>Serializable</em>来实现序列化非常简单，只需要实现该接口并且定义一个<em>serialVersionUID</em>就行，其余的工作都交给系统自动化进行了。如何进行对象的序列化与反序列化也非常简单，只需要<em>ObjectOutputStream</em>与<em>ObjectInputStream</em>即可轻松实现，如下<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//序列化</span></span><br><span class="line">  FlyPig flyPig = <span class="keyword">new</span> <span class="type">FlyPig</span>(<span class="string">"black"</span>,<span class="string">"naruto"</span>,<span class="string">"0000"</span>);  </span><br><span class="line">  ObjectOutputStream oos = <span class="keyword">new</span> <span class="type">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="type">FileOutputStream</span>(<span class="keyword">new</span> <span class="type">File</span>(<span class="string">"d:/flyPig.txt"</span>)));  </span><br><span class="line">  oos.writeObject(flyPig);  </span><br><span class="line">  oos.close();  </span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">  ObjectInputStream ois = <span class="keyword">new</span> <span class="type">ObjectInputStream</span>(<span class="keyword">new</span> <span class="type">FileInputStream</span>(<span class="keyword">new</span> <span class="type">File</span>(<span class="string">"d:/flyPig.txt"</span>)));  </span><br><span class="line">        FlyPig person = (FlyPig) ois.readObject();</span><br></pre></td></tr></table></figure></p><p>上面提到要指定<em>serialVersionUID</em>（通常制定为1L即可，系统会自动生成hash值），不指定能否进行序列化呢？答案是yes。<em>serialVersionUID</em>只是一个标识，用来辅助序列化与反序列化过程的，原则上序列化后的<em>serialVersionUID</em>只有和当前类的<em>serialVersionUID</em>相同才能被反序列化。原理就是序列化是将该字段写入文件或者其它中介，在反序列时先比对该字段，相同则可以反序列化成功，不同则抛异常<em>InvalidClassException</em>。</p><p>不指定<em>serialVersionUID</em>，当类新增或者删除属性时，系统会重新计算该类的hash并赋给<em>serialVersionUID</em>，这时候就会不一致导致反序列化失败，程序出现crash。手动指定就可以避免这种情况。当然如果类结构改变的话，尽管<em>serialVersionUID</em>验证通过，还是会序列化失败，因为类结构发生改变，无法从老版本的数据中还原出一个新的类结构对象</p><h3 id="Parcelable接口"><a href="#Parcelable接口" class="headerlink" title="Parcelable接口"></a>Parcelable接口</h3><p><em>Parcelable</em>是Android新提供的序列化方式，相对于<em>Serializable</em>，它的实现稍微复杂一点。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParcelableType</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> &#123;</span>  </span><br><span class="line">    <span class="keyword">int</span> age;  </span><br><span class="line">    String name;  </span><br><span class="line">    <span class="keyword">boolean</span> isGood;  </span><br><span class="line">    <span class="keyword">boolean</span> complete;  </span><br><span class="line">    <span class="keyword">private</span> String[] ids;  </span><br><span class="line">    <span class="keyword">private</span> OrderInfoBean bean;  </span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;OrderInfoBean&gt; listBeans;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 默认构造方法 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> ParcelableType() &#123;  </span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> ParcelableType(Parcel <span class="keyword">in</span>) &#123;  </span><br><span class="line">        readFromParcel(<span class="keyword">in</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/*** </span></span><br><span class="line"><span class="comment">     * 默认实现 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> describeContents() &#123;  </span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> writeToParcel(Parcel dest, <span class="keyword">int</span> flags) &#123;  </span><br><span class="line">        dest.writeInt(age);  </span><br><span class="line">        dest.writeString(name);  </span><br><span class="line">        dest.writeInt(isGood ? 1 : <span class="number">0</span>);  </span><br><span class="line">        dest.writeInt(complete ? 1 : <span class="number">0</span>);  </span><br><span class="line">        <span class="keyword">if</span> (ids != <span class="literal">null</span>) &#123;  </span><br><span class="line">            dest.writeInt(ids.length);  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            dest.writeInt(<span class="number">0</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        dest.writeStringArray(ids);  </span><br><span class="line">        dest.writeParcelable(bean, flags);  </span><br><span class="line">        dest.writeList(listBeans);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> readFromParcel(Parcel <span class="keyword">in</span>) &#123;  </span><br><span class="line">        age = <span class="keyword">in</span>.readInt();  </span><br><span class="line">        name = <span class="keyword">in</span>.readString();  </span><br><span class="line">        isGood = (<span class="keyword">in</span>.readInt() == <span class="number">1</span>) ? true : <span class="literal">false</span>;  </span><br><span class="line">        complete = (<span class="keyword">in</span>.readInt() == <span class="number">1</span>) ? true : <span class="literal">false</span>; </span><br><span class="line">        <span class="keyword">int</span> length = <span class="keyword">in</span>.readInt();  </span><br><span class="line">        ids = <span class="keyword">new</span> String[length];  </span><br><span class="line">        <span class="keyword">in</span>.readStringArray(ids);  </span><br><span class="line">        bean = <span class="keyword">in</span>.readParcelable(OrderInfoBean.<span class="keyword">class</span>.getClassLoader());  </span><br><span class="line">        listBeans = <span class="keyword">in</span>.readArrayList(OrderInfoBean.<span class="keyword">class</span>.getClassLoader());  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;ParcelableType&gt; CREATOR = <span class="keyword">new</span> Parcelable.Creator&lt;ParcelableType&gt;() &#123;  </span><br><span class="line">        <span class="keyword">public</span> ParcelableType createFromParcel(Parcel <span class="keyword">in</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ParcelableType(<span class="keyword">in</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> ParcelableType[] newArray(<span class="keyword">int</span> size) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ParcelableType[size];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line"> ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>Parcel</em>内部包装了可序列化的数据，可在Binder中自由的传递。从以上代码可以看出，序列化过程包含序列化、反序列化以及功能描述。序列化由<em>writeToParcel</em>方法完成，最终通过Parcel的一系列write方法完成；反序列化通过<em>CREATOR</em>来完成，其内部标识了如何创建序列化对象以及数组，并通过Parcel的一系列read方法来完成反序列化的过程；内容描述功能由<em>describeContents</em>方法完成，几乎所有的情况这个方法都返回0，只有当前对象存在文件描述符时，此方法返回1。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于Android开发来说，<em>Parcelable</em>与<em>Serializable</em>都能实现序列化并且都可用于Intent之间的数据传递，那么二者该如何选取呢？<em>Serializable</em>是java的序列化接口，其使用起来简单但是开销很大，序列化与反序列化过程需大量的IO操作。而<em>Parcelable</em>是Android的序列化方式，因此更适用于Android平台，它的缺点就是使用起来麻烦一点，但是效率更高，是Android推荐的序列化方法，我们应该首选<em>Parcelable</em>。<em>Parcelable</em>主要用在内存序列化上，通过<em>Parcelable</em>将对象序列化到存储设备或者将对象序列化后通过网络传输也都是可以的，但是这个过程会稍显复杂，因此在这两种情况建议大家使用<em>Serializable</em>。</p><p>参考书籍：《Android开发艺术探索》</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;简要介绍序列化以及反序列化，以及两种实现方式Serializable和Parcelable还有二者的区别&lt;br&gt;
    
    </summary>
    
    
      <category term="Serializable" scheme="//litten.me/tags/Serializable/"/>
    
      <category term="Parcelable" scheme="//litten.me/tags/Parcelable/"/>
    
      <category term="android" scheme="//litten.me/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="//litten.me/2015/12/31/hello-world/"/>
    <id>//litten.me/2015/12/31/hello-world/</id>
    <published>2015-12-31T06:49:13.000Z</published>
    <updated>2018-06-08T14:26:40.331Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
