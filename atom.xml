<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Penglian的博客</title>
  <icon>https://www.gravatar.com/avatar/e535e1a14e9c89335ced6c415a4d9735</icon>
  <subtitle>我不仅仅是一个码农</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//litten.me/"/>
  <updated>2018-06-13T06:47:07.712Z</updated>
  <id>//litten.me/</id>
  
  <author>
    <name>Purry</name>
    <email>1034670136@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="//litten.me/2018/06/13/blog_restful_GitHub/"/>
    <id>//litten.me/2018/06/13/blog_restful_GitHub/</id>
    <published>2018-06-13T06:41:52.820Z</published>
    <updated>2018-06-13T06:47:07.712Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: 基于Rxjava+okhttp+retrofit的网络框架搭建<br>date: 2018-04-25 16:00:00<br>comments: true<br>tags: </p><pre><code>- android - rxjava- retrofit- okhttp</code></pre><hr><hr><p>基于Rxjava+okhttp+retrofit搭建的网络请求框架，封装了练手项目中的各个表对应的基本网络请求<br><a id="more"></a></p><h2 id="开发背景"><a href="#开发背景" class="headerlink" title="开发背景"></a>开发背景</h2><p>本框架是基于Rxjava2+retrofit2+okhttp3，可以实现线程之间的快速切换；处理数据简洁易懂，易于进行元素间的变换；可以简单处理大量的嵌套异步回调等。但是使用Retrofit+RxJava+OkHttp完成一次网络请求还是需要写很多代码的，所以肯定是需要再次封装的。该框架的目标是使开发者不用花费精力是理解网络请求的内部实现以及uri等配置，只需要调用对应的业务方法即可完成网络请求，当然更高目标是架构清晰，易于扩展，耦合度低。</p><h2 id="框架搭建以及介绍"><a href="#框架搭建以及介绍" class="headerlink" title="框架搭建以及介绍"></a>框架搭建以及介绍</h2><h3 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h3><p>   app gradle配置：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">implementation</span> <span class="string">"com.squareup.retrofit2:retrofit:<span class="variable">$rootProject</span>.retrofitVersion"</span></span><br><span class="line">    implementation <span class="string">"com.squareup.retrofit2:converter-gson:<span class="variable">$rootProject</span>.retrofitVersion"</span></span><br><span class="line">    implementation <span class="string">"com.jakewharton.retrofit:retrofit2-rxjava2-adapter:<span class="variable">$rootProject</span>.rxjavaAdapter"</span></span><br><span class="line">    implementation <span class="string">"com.squareup.okhttp3:logging-interceptor:<span class="variable">$rootProject</span>.okhttploggingVersion"</span></span><br><span class="line">    implementation <span class="string">"com.squareup.okhttp3:okhttp:<span class="variable">$rootProject</span>.okhttpVersion"</span></span><br><span class="line">    implementation <span class="string">"io.reactivex.rxjava2:rxjava:<span class="variable">$rootProject</span>.rxjavaVersion"</span></span><br><span class="line">    implementation <span class="string">"io.reactivex.rxjava2:rxandroid:<span class="variable">$rootProject</span>.rxandroidVersion"</span></span><br><span class="line">implementation <span class="string">"com.jakewharton.rxbinding2:rxbinding:<span class="variable">$rootProject</span>.rxbindingVersion"</span></span><br></pre></td></tr></table></figure></p><p>Project gradle配置<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">    retrofitVersion = '<span class="number">2.2</span><span class="number">.0</span>'</span><br><span class="line">    okhttploggingVersion = '<span class="number">3.4</span><span class="number">.1</span>'</span><br><span class="line">    okhttpVersion = '<span class="number">3.4</span><span class="number">.1</span>'</span><br><span class="line">    rxjavaVersion = '<span class="number">2.1</span><span class="number">.0</span>'</span><br><span class="line">    rxandroidVersion = '<span class="number">2.0</span><span class="number">.1</span>'</span><br><span class="line">    rxbindingVersion = '<span class="number">2.0</span><span class="number">.0</span>'</span><br><span class="line">    rxjavaAdapter = '<span class="number">1.0</span><span class="number">.0</span>'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2、架构展示"><a href="#2、架构展示" class="headerlink" title="2、架构展示"></a>2、架构展示</h3><p><img src="/img/pl/project_structure.png" alt=""></p><h3 id="3、关键模块解析"><a href="#3、关键模块解析" class="headerlink" title="3、关键模块解析"></a>3、关键模块解析</h3><p><strong>RxHelper</strong>：是一个Rxjava的辅助类，主要提供线程切换等方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ObservableTransformer&lt;T, T&gt; <span class="title">rxSchedulerHelper</span><span class="params">()</span> </span>&#123;<span class="comment">//compose处理线程</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ObservableTransformer&lt;T, T&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ObservableSource&lt;T&gt; <span class="title">apply</span><span class="params">(Observable&lt;T&gt; upstream)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> upstream.subscribeOn(Schedulers.io())</span><br><span class="line">                        .observeOn(AndroidSchedulers.mainThread());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>RetrofitCreateHelper</strong>：是框架的核心类，包含okhttp以及retrofit配置以及Api接口的反射调用等。采用gson实现json字符串与实体类之间的自动转化<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIMEOUT_READ = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIMEOUT_CONNECTION = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HttpLoggingInterceptor interceptor = <span class="keyword">new</span> HttpLoggingInterceptor()</span><br><span class="line">            .setLevel(HttpLoggingInterceptor.Level.BODY);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CacheInterceptor cacheInterceptor = <span class="keyword">new</span> CacheInterceptor();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HeaderInterceptor headerInterceptor = <span class="keyword">new</span> HeaderInterceptor();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">            <span class="comment">//SSL证书</span></span><br><span class="line">            .sslSocketFactory(TrustManager.getUnsafeOkHttpClient())</span><br><span class="line">            .hostnameVerifier(org.apache.http.conn.ssl.SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER)</span><br><span class="line">            .addInterceptor(headerInterceptor)</span><br><span class="line">            .addInterceptor(interceptor)   <span class="comment">//打印日志</span></span><br><span class="line">            .addNetworkInterceptor(cacheInterceptor)  <span class="comment">//设置Cache拦截器</span></span><br><span class="line">            .addInterceptor(cacheInterceptor)</span><br><span class="line">            .cache(HttpCache.getCache())</span><br><span class="line">            <span class="comment">//time out</span></span><br><span class="line">            .connectTimeout(TIMEOUT_CONNECTION, TimeUnit.SECONDS)</span><br><span class="line">            .readTimeout(TIMEOUT_READ, TimeUnit.SECONDS)</span><br><span class="line">            .writeTimeout(TIMEOUT_READ, TimeUnit.SECONDS)</span><br><span class="line">            <span class="comment">//失败重连</span></span><br><span class="line">            .retryOnConnectionFailure(<span class="keyword">true</span>)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">createApi</span><span class="params">(Class&lt;T&gt; clazz, String url)</span> </span>&#123;</span><br><span class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(url)</span><br><span class="line">                .client(okHttpClient)</span><br><span class="line">                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="function"><span class="keyword">return</span> retrofit.<span class="title">create</span><span class="params">(clazz)</span></span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>RxManager</strong>：提供Rxjava中订阅者的注册订阅与取消订阅<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RxManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> CompositeDisposable mCompositeDisposable = <span class="keyword">new</span> CompositeDisposable();<span class="comment">// 管理订阅者者</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span>(<span class="params">Disposable d</span>) </span>&#123;</span><br><span class="line">        mCompositeDisposable.<span class="keyword">add</span>(d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unSubscribe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        mCompositeDisposable.dispose();<span class="comment">// 取消订阅</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Okhttp包</strong>：主要就是定义一些okhttp的拦截器，包含缓存拦截器和https认证等，其中由于采用的是bomb的后台，需要添加一个header拦截器，自定义一些header。okhttp采用的是责任链拦截器的模式，采用的是类似U型的调用，后一个拦截器执行失败则结束，成功则将结果返回给前一个拦截器，以此类推，直至首个拦截器，则完成一次完整的网络请求。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrustManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SSLSocketFactory <span class="title">getUnsafeOkHttpClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Create a trust manager that does not validate certificate chains</span></span><br><span class="line">            <span class="keyword">final</span> X509TrustManager[] trustAllCerts = <span class="keyword">new</span> X509TrustManager[]&#123;<span class="keyword">new</span> X509TrustManager() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                        X509Certificate[] chain,</span></span></span><br><span class="line"><span class="function"><span class="params">                        String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                        X509Certificate[] chain,</span></span></span><br><span class="line"><span class="function"><span class="params">                        String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Install the all-trusting trust manager</span></span><br><span class="line">            <span class="keyword">final</span> SSLContext sslContext = SSLContext.getInstance(<span class="string">"TLS"</span>);</span><br><span class="line">            sslContext.init(<span class="keyword">null</span>, trustAllCerts,</span><br><span class="line">                    <span class="keyword">new</span> java.security.SecureRandom());</span><br><span class="line">            <span class="comment">// Create an ssl socket factory with our all-trusting manager</span></span><br><span class="line">            <span class="keyword">final</span> SSLSocketFactory sslSocketFactory = sslContext</span><br><span class="line">                    .getSocketFactory();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> sslSocketFactory;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Api包</strong>：定义表对应的api接口类，接口类中定义各个业务方法<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserApi</span></span>&#123;</span><br><span class="line">    String HOST = <span class="string">"https://api.bmob.cn/1/classes/"</span>;</span><br><span class="line">    String TABLE_URL = <span class="string">"_User"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET(TABLE_URL + <span class="meta-string">"/&#123;objectId&#125;"</span>)</span></span><br><span class="line">    Observable&lt;UserBean&gt; getData(<span class="meta">@Path(<span class="meta-string">"objectId"</span>)</span> String objectId);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET(TABLE_URL)</span></span><br><span class="line">    Observable&lt;ListObjectBean&lt;UserBean&gt;&gt; getListData();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@POST(TABLE_URL)</span></span><br><span class="line">    Observable&lt;UserBean&gt; postData(<span class="meta">@Body</span> UserBean userBean);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PUT(TABLE_URL + <span class="meta-string">"/&#123;objectId&#125;"</span>)</span></span><br><span class="line">    Observable&lt;UserBean&gt; putData(<span class="meta">@Path(<span class="meta-string">"objectId"</span>)</span> String objectId, <span class="meta">@Body</span> UserBean userBean);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DELETE(TABLE_URL + <span class="meta-string">"/&#123;objectId&#125;"</span>)</span></span><br><span class="line">    Observable&lt;UserBean&gt; deleteData(<span class="meta">@Path(<span class="meta-string">"objectId"</span>)</span> String objectId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Bean包</strong>：定义与表字段对应的实体类，其中ListObjectBean是专门处理list数据的，由于采用gson自动转化，所以需要在List<t>包裹一层；BaseBean是实体基类，定义一些公共属性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListObjectBean</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; results;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getResults</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResults</span><span class="params">(List&lt;T&gt; results)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.results = results;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></t></p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>基于的是bomb的云服务器后台，bomb后台提供的restful接口方式是基于表形式的，后台提供的服务接口有限，目前本框架暂时只支持以下五种基于表形式的请求接口，有其它需求后期再考虑扩展。（已下以rentout_info表为例，由于只是测试使用，如果是mvp架构，实际使用可以将Observable的获取放入model层）</p><h3 id="1、Get方式（获取单条数据）"><a href="#1、Get方式（获取单条数据）" class="headerlink" title="1、Get方式（获取单条数据）"></a>1、Get方式（获取单条数据）</h3><p>   入参 :   objectId（表objectId）</p><p>   回调 :   成功回调 —&gt; RentOutInfoBean实体=&gt;与表字段对应的实体类<br>            失败回调—&gt; Throwable异常对象</p><p>   举例 :<br>   <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">rxManager</span><span class="selector-class">.register</span>(RetrofitCreateHelper.createApi(RentOutApi.class, RentOutApi.HOST).getData(objectId)</span><br><span class="line">                     .compose(RxHelper.&lt;RentOutInfoBean&gt;rxSchedulerHelper()).subscribe(new Consumer&lt;RentOutInfoBean&gt;() &#123;</span><br><span class="line">                         <span class="variable">@Override</span></span><br><span class="line">                         public void accept(RentOutInfoBean result) throws Exception &#123;</span><br><span class="line">                             if (result != null) &#123;</span><br><span class="line">                                 StringBuilder sb = new StringBuilder();</span><br><span class="line">                                 sb.append(result.getObjectId() + <span class="string">":"</span> + result.getCity() + <span class="string">":"</span> + result.getContent() + <span class="string">"\n"</span>);</span><br><span class="line">                                 tvResult.setText(sb.toString());</span><br><span class="line">                             &#125;</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;, new Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">                         <span class="variable">@Override</span></span><br><span class="line">                         public void accept(Throwable throwable) throws Exception &#123;</span><br><span class="line">                             ToastUtil.showLong(MainActivity.this, throwable.toString());</span><br><span class="line">                             tvResult.setText(throwable.toString());</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;));</span><br></pre></td></tr></table></figure></p><h3 id="2、Get方式（获取多条数据）"><a href="#2、Get方式（获取多条数据）" class="headerlink" title="2、Get方式（获取多条数据）"></a>2、Get方式（获取多条数据）</h3><p>   入参 :   无</p><p>   回调 :   成功回调 —&gt;ListObjectBean<rentoutinfobean>=&gt;含有List<rentoutinfobean><br>   失败回调—&gt; Throwable异常对象</rentoutinfobean></rentoutinfobean></p><p>   举例 :<br>   <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">rxManager</span><span class="selector-class">.register</span>(RetrofitCreateHelper.createApi(RentOutApi.class, RentOutApi.HOST)</span><br><span class="line">                    .getListData().compose(RxHelper.&lt;ListObjectBean&lt;RentOutInfoBean&gt;&gt;rxSchedulerHelper())</span><br><span class="line">                    .subscribe(new Consumer&lt;ListObjectBean&lt;RentOutInfoBean&gt;&gt;() &#123;</span><br><span class="line">                        <span class="variable">@Override</span></span><br><span class="line">                        public void accept(ListObjectBean&lt;RentOutInfoBean&gt; result) throws Exception &#123;</span><br><span class="line">                            if (result != null) &#123;</span><br><span class="line">                                List&lt;RentOutInfoBean&gt; rentOutInfoBeans = result.getResults();</span><br><span class="line">                                if (rentOutInfoBeans != null &amp;&amp; rentOutInfoBeans.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                    StringBuilder sb = new StringBuilder();</span><br><span class="line">                                    for (RentOutInfoBean <span class="attribute">rentOutInfoBean </span>: rentOutInfoBeans) &#123;</span><br><span class="line">                                        sb.append(rentOutInfoBean.getObjectId() + <span class="string">":"</span> + rentOutInfoBean.getCity() + <span class="string">":"</span> + rentOutInfoBean.getContent() + <span class="string">"\n"</span>);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    tvResult.setText(sb.toString());</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, new Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">                        <span class="variable">@Override</span></span><br><span class="line">                        public void accept(Throwable throwable) throws Exception &#123;</span><br><span class="line">                            ToastUtil.showLong(MainActivity.this, throwable.toString());</span><br><span class="line">                            tvResult.setText(throwable.toString());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;));</span><br></pre></td></tr></table></figure></p><h3 id="3、Post方式（添加单条数据）"><a href="#3、Post方式（添加单条数据）" class="headerlink" title="3、Post方式（添加单条数据）"></a>3、Post方式（添加单条数据）</h3><p>入参 :   RentOutInfoBean实体</p><p>回调 :   成功回调 —&gt;RentOutInfoBean实体=&gt;只包含objectId和createdAt字段    失败回调—&gt; Throwable异常对象</p><p> 举例 :<br> <figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">RentOutInfoBean testBean = <span class="keyword">new</span> RentOutInfoBean();</span><br><span class="line">              testBean.setLastTime(<span class="string">"131241341"</span>);</span><br><span class="line">              testBean.setContent(<span class="string">"13413411314ssa3"</span>);</span><br><span class="line">              testBean.setCity(<span class="string">"哈尔滨"</span>);</span><br><span class="line">              rxManager.register(RetrofitCreateHelper.createApi(RentOutApi.class, RentOutApi.HOST).postData(testBean)</span><br><span class="line">                      .compose(RxHelper.&lt;RentOutInfoBean&gt;rxSchedulerHelper()).subscribe(<span class="keyword">new</span> Consumer&lt;RentOutInfoBean&gt;() &#123;</span><br><span class="line">                          <span class="meta">@Override</span></span><br><span class="line">                          <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(RentOutInfoBean result)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                              <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                  tvResult.setText(result.getObjectId());</span><br><span class="line">                              &#125;</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">                          <span class="meta">@Override</span></span><br><span class="line">                          <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                              ToastUtil.showLong(MainActivity.<span class="keyword">this</span>, throwable.toString());</span><br><span class="line">                              tvResult.setText(throwable.toString());</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;));</span><br></pre></td></tr></table></figure></p><h3 id="4、Put方式（修改单条数据）"><a href="#4、Put方式（修改单条数据）" class="headerlink" title="4、Put方式（修改单条数据）"></a>4、Put方式（修改单条数据）</h3><p>   入参 :   objectId  </p><p>   RentOutInfoBean实体=&gt;包含要修改的字段<br>   回调 :   成功回调 —&gt;RentOutInfoBean实体=&gt;只包含updatedAt字段失败回调—&gt; Throwable异常对象</p><p>   举例 :<br>   <figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> RentOutInfoBean testBean1 = <span class="keyword">new</span> RentOutInfoBean();</span><br><span class="line">            testBean1.setCity(<span class="string">"上海"</span>);</span><br><span class="line">            rxManager.register(RetrofitCreateHelper.createApi(RentOutApi.class, RentOutApi.HOST).putData(objectId, testBean1)</span><br><span class="line">                    .compose(RxHelper.&lt;RentOutInfoBean&gt;rxSchedulerHelper()).subscribe(<span class="keyword">new</span> Consumer&lt;RentOutInfoBean&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(RentOutInfoBean result)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                tvResult.setText(result.getUpdatedAt());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ToastUtil.showLong(MainActivity.<span class="keyword">this</span>, throwable.toString());</span><br><span class="line">                            tvResult.setText(throwable.toString());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;));</span><br></pre></td></tr></table></figure></p><h3 id="5、Delete方式（删除单条数据）"><a href="#5、Delete方式（删除单条数据）" class="headerlink" title="5、Delete方式（删除单条数据）"></a>5、Delete方式（删除单条数据）</h3><p>   入参 :   objectId</p><p>   回调 :   成功回调 —&gt;RentOutInfoBean实体=&gt;只包含msg字段 值为”ok”失败回调—&gt; Throwable异常对象</p><p>   举例 :<br>   <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">rxManager</span><span class="selector-class">.register</span>(RetrofitCreateHelper.createApi(RentOutApi.class, RentOutApi.HOST).deleteData(objectId)</span><br><span class="line">                     .compose(RxHelper.&lt;RentOutInfoBean&gt;rxSchedulerHelper()).subscribe(new Consumer&lt;RentOutInfoBean&gt;() &#123;</span><br><span class="line">                         <span class="variable">@Override</span></span><br><span class="line">                         public void accept(RentOutInfoBean result) throws Exception &#123;</span><br><span class="line">                             if (result != null) &#123;</span><br><span class="line">                                 tvResult.setText(result.getMsg());</span><br><span class="line">                             &#125;</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;, new Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">                         <span class="variable">@Override</span></span><br><span class="line">                         public void accept(Throwable throwable) throws Exception &#123;</span><br><span class="line">                             ToastUtil.showLong(MainActivity.this, throwable.toString());</span><br><span class="line">                             tvResult.setText(throwable.toString());</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;));</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由于目前还是处于第一版，再加上bomb后台的restful接口服务限制，只提供了一些基础通用的请求方式，还有许多需要补充与完善的地方，比如文件上传、模糊搜索等一些高级请求。 </p><p>参考链接：<br><a href="https://blog.csdn.net/qiang_xi/article/details/53959437" target="_blank" rel="noopener">https://blog.csdn.net/qiang_xi/article/details/53959437</a></p><p>Demo链接：<br><a href="https://github.com/penglian/TestRestful" target="_blank" rel="noopener">https://github.com/penglian/TestRestful</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;title: 基于Rxjava+okhttp+retrofit的网络框架搭建&lt;br&gt;date: 2018-04-25 16:00:00&lt;br&gt;comments: true&lt;br&gt;tags: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- android 
- rxjava
- retrofit
- okhttp
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;hr&gt;
&lt;p&gt;基于Rxjava+okhttp+retrofit搭建的网络请求框架，封装了练手项目中的各个表对应的基本网络请求&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android的IPC机制</title>
    <link href="//litten.me/2018/06/13/blog_ipc_GitHub/"/>
    <id>//litten.me/2018/06/13/blog_ipc_GitHub/</id>
    <published>2018-06-13T04:00:00.000Z</published>
    <updated>2018-06-13T06:23:17.653Z</updated>
    
    <content type="html"><![CDATA[<hr><p>简要介绍Android IPC和多进程的运行模式以及常见的几种IPC方式。<br><a id="more"></a></p><h2 id="IPC简介"><a href="#IPC简介" class="headerlink" title="IPC简介"></a>IPC简介</h2><h3 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h3><p>IPC是Inter-Process Communication的缩写，含义为进程间通信或者跨进程通信，是指两个进程间进行数据交换的过程。</p><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><p>进程一般指一个执行单元，在PC或者移动设备上指一个程序或者一个应用；线程是CPU调度的最小单元，同时线程也是一种有限的系统资源。一个进程可以包含多个线程，两者是包含的关系。例如在Android应用中，默认都含有一个主线程，也叫做UI线程，用于操作一些界面绘制的任务，如果把一些耗时任务放在UI线程中，就会引起ANR(应用没有响应)，所以必须将其放入到子线程中进行。</p><h3 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h3><p>对于Android开发者来说，Binder应该是既熟悉又陌生，熟悉是因为在Android系统中它无处不在，陌生是因为它学习门槛高，从应用开发层贯穿至linux内核层，要深入了解你必须苦下功夫，阅读源码。所以binder很复杂，这边简要介绍binder使用以及上层原理。</p><p>Binder是Android的一个实现了Ibinder接口的类，它是一种跨进程的通信方式。在Linux内核层，它是一种虚拟的物理设备，它含有自己设备驱动在Linux内核层负责与硬件进行交互；在应用层与FrameWork层，Binder充当的是客户端与服务端进行消息交换的媒介，相当于一个中间层，对消息进行包装（封装成Binder对象），客户端就可以通过该对象来获取服务端的内容（客户端与服务端是可以随时互换的，并不是固定不变的）。</p><h2 id="Android中的多进程模式"><a href="#Android中的多进程模式" class="headerlink" title="Android中的多进程模式"></a>Android中的多进程模式</h2><h3 id="多进程设置"><a href="#多进程设置" class="headerlink" title="多进程设置"></a>多进程设置</h3><p>多进程的配置很简单，只要在Manifests配置文件中，给四大组件配上android:process属性即可，配置完运行即可在AndroidStudio或者Adb命令查看到多个进程以及相应的ID。</p><h3 id="多进程运行机制"><a href="#多进程运行机制" class="headerlink" title="多进程运行机制"></a>多进程运行机制</h3><p>Android会为每个进程分配一个虚拟机，不同的虚拟机在内存分配上有不同的地址空间，这就导致不同的虚拟机访问同一个类会产生多个副本。例如：进程A与进程B，类C含有一个静态属性，在进程A中将其值改变，而在进程B中读取的还是之前未改变的值，这就产生了一个同步的差异。</p><p>多进程一般会产生一下几个问题：</p><p>1、静态成员与单例完全失效</p><p>2、线程同步机制完全失效</p><p>3、SharePreference可靠性下降</p><p>4、Apllication会创建多次</p><p>第1与第2个问题都是因为内存地址不同造成的；第3个问题是由于多进程并发读写Xml文件，可能造成数据丢失或者错乱；第四个问题是Android系统机制决定的，每个进程都会分配一个独立的虚拟机，这个过程其实就是启动一个应用的过程</p><h2 id="Android中的IPC方式"><a href="#Android中的IPC方式" class="headerlink" title="Android中的IPC方式"></a>Android中的IPC方式</h2><p>由上可知，在多进程中不能像单进程一样操作，否则会造成很多潜在的问题，必须用进程间通信来处理跨域问题，以下是常见几种IPC方式</p><h3 id="使用Bundle"><a href="#使用Bundle" class="headerlink" title="使用Bundle"></a>使用Bundle</h3><p>通过Intent传递Bundle数据可用于实现组件（Activity、Service以及Receiver）之间消息通信，Bundle实现了Parceable接口，方便在不同进程间通信。Bundle支持的类型有基本类型、Parceable以及Serializable以及Android支持的特殊对象。例如：进程A的<br>aActivity直接用Intent(消息封装成Bundle对象)传递给进程B的bActivity,bActivity就能获取bundle中消息，实现进程间的通信了。</p><h3 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h3><p>文件共享顾名思义就是利用文件来存储数据，然后通过对文件的读写来实现数据共享。由上可知，多进程时可能会造成高并发操作文件，导致数据错乱或者不可靠，所以文件共享适合对数据同步要求不高的进程之间通信，并且要妥善处理并发读写问题。</p><h3 id="AIDL"><a href="#AIDL" class="headerlink" title="AIDL"></a>AIDL</h3><p>AIDL是应用接口定义语言，是用于实现进程间通信的，主要分为客户端与服务端。</p><p>服务端：</p><p>服务端首先要创建一个Service用来监听客户端的请求，然后创建一个AIDL文件，将暴露给客户端的接口在AIDL文件中声明，最后在Service中实现这个AIDL接口即可。</p><p>客户端：</p><p>客户端要做的事稍微简单点，首先需要绑定服务端的Service,绑定成功后，将服务端返回的Binder对象转换成AIDL接口所属的类型，接着就可以调用AIDL中的方法了。</p><p>对于AIDL文件的创建以及具体的代码事例这里就不进行介绍了，想了解的同学可以上网查找。</p><h3 id="Messeneger"><a href="#Messeneger" class="headerlink" title="Messeneger"></a>Messeneger</h3><p>Messenger可以翻译为信使，通过它可以在不同进程间传递Message对象，将数据封装成Message，就可以轻松实现进程间传递了。Messenger是一种轻量级的IPC方案，它的底层实现是aidl,它是串行执行请求的，不能并发处理多个客户端的请求，所以它只适用于一些非高并发请求的场景。如下是它的实现流程图：</p><p><img src="/img/pl/ipc_messenger.png" alt=""></p><h3 id="使用ContentProvider"><a href="#使用ContentProvider" class="headerlink" title="使用ContentProvider"></a>使用ContentProvider</h3><p>ContentProvider是内容提供者，对于Android开发者来说这个应该不陌生，它是四大组件之一，它的搭档是ContentResolver(内容解析者)。底层是基于binder实现的，Android系统帮我们做好了封装，我们可以很简单的就能实现IPC。实现一个ContentProvider需要继承ContentProvider类，并且重写CRUD四个方法，并对其进行注册设置标识，其它应用或者进程通过ContentResolver与标识对其进行解析，这就实现了进程间的通信了。当然ContentProvider存储的媒介是多样的，可以是数据库、文件或者其它。</p><h3 id="使用Socket"><a href="#使用Socket" class="headerlink" title="使用Socket"></a>使用Socket</h3><p>Socket也成为“套接字”，是网络通信中的概念，分为流式套接字以及用户数据报套接字两种，分别对应Tcp(可靠传输)与Udp(不可靠传输)协议。socket是基于客户端/服务器模式的，服务端启动一个服务监听客户端的连接，当有客户端接进来时，就可以进行消息传递了。客户端就是配置好ip以及端口号，发送连接请求给服务端即可。当然对于服务端的设计还是有点讲究的，需要考虑到多客户端接入处理效率以及资源的回收等问题，这里就不多做描述了，有兴趣的同学可以自己尝试。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面介绍的IPC方式多种多样，对于开发者来说选择合适的IPC方式是相当重要的，如下图：</p><p><img src="/img/pl/ipc_difference.png" alt=""></p><p>当然Android的IPC岂是一篇博客能够讲完的，这里只是对其作了大致的介绍，对于binder、aidl以及Messenger等都没有做深入研究，有兴趣的同学可以阅读对应的源码进行研究探索。</p><p>参考书籍：《Android开发艺术探索》</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;简要介绍Android IPC和多进程的运行模式以及常见的几种IPC方式。&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="//litten.me/tags/android/"/>
    
      <category term="IPC" scheme="//litten.me/tags/IPC/"/>
    
      <category term="Binder" scheme="//litten.me/tags/Binder/"/>
    
      <category term="AIDL" scheme="//litten.me/tags/AIDL/"/>
    
      <category term="Messenger" scheme="//litten.me/tags/Messenger/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Serializable与Parcelable</title>
    <link href="//litten.me/2018/06/06/blog_serialization_GitHub/"/>
    <id>//litten.me/2018/06/06/blog_serialization_GitHub/</id>
    <published>2018-06-06T04:00:00.000Z</published>
    <updated>2018-06-08T15:06:35.850Z</updated>
    
    <content type="html"><![CDATA[<hr><p>简要介绍序列化以及反序列化，以及两种实现方式Serializable和Parcelable还有二者的区别<br><a id="more"></a></p><h2 id="序列化与反序列化的由来"><a href="#序列化与反序列化的由来" class="headerlink" title="序列化与反序列化的由来"></a>序列化与反序列化的由来</h2><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>序列化 (Serialization)将对象的状态信息转换为可以存储或传输的形式的过程。在序列化期间，对象将其当前状态写入到临时或持久性存储区。即对象转换为字节序列。</p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>顾名思义，就是从存储区上反序列化对象的状态，重新<em>创建</em>对象。即字节序列重新转换为对象。</p><h3 id="两者的由来"><a href="#两者的由来" class="headerlink" title="两者的由来"></a>两者的由来</h3><p>在日常java编程中，网络传输以及文件存储等操作是必不可少的。序列化能保证网络传输以及文件存储中对象的一致性与持久性，不会发生错乱；反序列化能重新创建一个相同的对象，所以说序列化与反序列化也是java编程中必不可少的。</p><h2 id="如何实现序列化"><a href="#如何实现序列化" class="headerlink" title="如何实现序列化"></a>如何实现序列化</h2><h3 id="Serializable接口"><a href="#Serializable接口" class="headerlink" title="Serializable接口"></a>Serializable接口</h3><p><em>Serializable</em>是java提供的一个序列化的接口，它是一个空接口，为对象提供标准的序列化与反序列化操作。实体定义如下<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyPig</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Serializable</span></span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final long serialVersionUID = <span class="number">1</span>L;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> AGE = <span class="string">"269"</span>;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> color;  </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>Serializable</em>来实现序列化非常简单，只需要实现该接口并且定义一个<em>serialVersionUID</em>就行，其余的工作都交给系统自动化进行了。如何进行对象的序列化与反序列化也非常简单，只需要<em>ObjectOutputStream</em>与<em>ObjectInputStream</em>即可轻松实现，如下<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//序列化</span></span><br><span class="line">  FlyPig flyPig = <span class="keyword">new</span> <span class="type">FlyPig</span>(<span class="string">"black"</span>,<span class="string">"naruto"</span>,<span class="string">"0000"</span>);  </span><br><span class="line">  ObjectOutputStream oos = <span class="keyword">new</span> <span class="type">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="type">FileOutputStream</span>(<span class="keyword">new</span> <span class="type">File</span>(<span class="string">"d:/flyPig.txt"</span>)));  </span><br><span class="line">  oos.writeObject(flyPig);  </span><br><span class="line">  oos.close();  </span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">  ObjectInputStream ois = <span class="keyword">new</span> <span class="type">ObjectInputStream</span>(<span class="keyword">new</span> <span class="type">FileInputStream</span>(<span class="keyword">new</span> <span class="type">File</span>(<span class="string">"d:/flyPig.txt"</span>)));  </span><br><span class="line">        FlyPig person = (FlyPig) ois.readObject();</span><br></pre></td></tr></table></figure></p><p>上面提到要指定<em>serialVersionUID</em>（通常制定为1L即可，系统会自动生成hash值），不指定能否进行序列化呢？答案是yes。<em>serialVersionUID</em>只是一个标识，用来辅助序列化与反序列化过程的，原则上序列化后的<em>serialVersionUID</em>只有和当前类的<em>serialVersionUID</em>相同才能被反序列化。原理就是序列化是将该字段写入文件或者其它中介，在反序列时先比对该字段，相同则可以反序列化成功，不同则抛异常<em>InvalidClassException</em>。</p><p>不指定<em>serialVersionUID</em>，当类新增或者删除属性时，系统会重新计算该类的hash并赋给<em>serialVersionUID</em>，这时候就会不一致导致反序列化失败，程序出现crash。手动指定就可以避免这种情况。当然如果类结构改变的话，尽管<em>serialVersionUID</em>验证通过，还是会序列化失败，因为类结构发生改变，无法从老版本的数据中还原出一个新的类结构对象</p><h3 id="Parcelable接口"><a href="#Parcelable接口" class="headerlink" title="Parcelable接口"></a>Parcelable接口</h3><p><em>Parcelable</em>是Android新提供的序列化方式，相对于<em>Serializable</em>，它的实现稍微复杂一点。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParcelableType</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> &#123;</span>  </span><br><span class="line">    <span class="keyword">int</span> age;  </span><br><span class="line">    String name;  </span><br><span class="line">    <span class="keyword">boolean</span> isGood;  </span><br><span class="line">    <span class="keyword">boolean</span> complete;  </span><br><span class="line">    <span class="keyword">private</span> String[] ids;  </span><br><span class="line">    <span class="keyword">private</span> OrderInfoBean bean;  </span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;OrderInfoBean&gt; listBeans;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 默认构造方法 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> ParcelableType() &#123;  </span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> ParcelableType(Parcel <span class="keyword">in</span>) &#123;  </span><br><span class="line">        readFromParcel(<span class="keyword">in</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/*** </span></span><br><span class="line"><span class="comment">     * 默认实现 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> describeContents() &#123;  </span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> writeToParcel(Parcel dest, <span class="keyword">int</span> flags) &#123;  </span><br><span class="line">        dest.writeInt(age);  </span><br><span class="line">        dest.writeString(name);  </span><br><span class="line">        dest.writeInt(isGood ? 1 : <span class="number">0</span>);  </span><br><span class="line">        dest.writeInt(complete ? 1 : <span class="number">0</span>);  </span><br><span class="line">        <span class="keyword">if</span> (ids != <span class="literal">null</span>) &#123;  </span><br><span class="line">            dest.writeInt(ids.length);  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            dest.writeInt(<span class="number">0</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        dest.writeStringArray(ids);  </span><br><span class="line">        dest.writeParcelable(bean, flags);  </span><br><span class="line">        dest.writeList(listBeans);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> readFromParcel(Parcel <span class="keyword">in</span>) &#123;  </span><br><span class="line">        age = <span class="keyword">in</span>.readInt();  </span><br><span class="line">        name = <span class="keyword">in</span>.readString();  </span><br><span class="line">        isGood = (<span class="keyword">in</span>.readInt() == <span class="number">1</span>) ? true : <span class="literal">false</span>;  </span><br><span class="line">        complete = (<span class="keyword">in</span>.readInt() == <span class="number">1</span>) ? true : <span class="literal">false</span>; </span><br><span class="line">        <span class="keyword">int</span> length = <span class="keyword">in</span>.readInt();  </span><br><span class="line">        ids = <span class="keyword">new</span> String[length];  </span><br><span class="line">        <span class="keyword">in</span>.readStringArray(ids);  </span><br><span class="line">        bean = <span class="keyword">in</span>.readParcelable(OrderInfoBean.<span class="keyword">class</span>.getClassLoader());  </span><br><span class="line">        listBeans = <span class="keyword">in</span>.readArrayList(OrderInfoBean.<span class="keyword">class</span>.getClassLoader());  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;ParcelableType&gt; CREATOR = <span class="keyword">new</span> Parcelable.Creator&lt;ParcelableType&gt;() &#123;  </span><br><span class="line">        <span class="keyword">public</span> ParcelableType createFromParcel(Parcel <span class="keyword">in</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ParcelableType(<span class="keyword">in</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> ParcelableType[] newArray(<span class="keyword">int</span> size) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ParcelableType[size];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line"> ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>Parcel</em>内部包装了可序列化的数据，可在Binder中自由的传递。从以上代码可以看出，序列化过程包含序列化、反序列化以及功能描述。序列化由<em>writeToParcel</em>方法完成，最终通过Parcel的一系列write方法完成；反序列化通过<em>CREATOR</em>来完成，其内部标识了如何创建序列化对象以及数组，并通过Parcel的一系列read方法来完成反序列化的过程；内容描述功能由<em>describeContents</em>方法完成，几乎所有的情况这个方法都返回0，只有当前对象存在文件描述符时，此方法返回1。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于Android开发来说，<em>Parcelable</em>与<em>Serializable</em>都能实现序列化并且都可用于Intent之间的数据传递，那么二者该如何选取呢？<em>Serializable</em>是java的序列化接口，其使用起来简单但是开销很大，序列化与反序列化过程需大量的IO操作。而<em>Parcelable</em>是Android的序列化方式，因此更适用于Android平台，它的缺点就是使用起来麻烦一点，但是效率更高，是Android推荐的序列化方法，我们应该首选<em>Parcelable</em>。<em>Parcelable</em>主要用在内存序列化上，通过<em>Parcelable</em>将对象序列化到存储设备或者将对象序列化后通过网络传输也都是可以的，但是这个过程会稍显复杂，因此在这两种情况建议大家使用<em>Serializable</em>。</p><p>参考书籍：《Android开发艺术探索》</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;简要介绍序列化以及反序列化，以及两种实现方式Serializable和Parcelable还有二者的区别&lt;br&gt;
    
    </summary>
    
    
      <category term="Serializable" scheme="//litten.me/tags/Serializable/"/>
    
      <category term="Parcelable" scheme="//litten.me/tags/Parcelable/"/>
    
      <category term="android" scheme="//litten.me/tags/android/"/>
    
  </entry>
  
</feed>
